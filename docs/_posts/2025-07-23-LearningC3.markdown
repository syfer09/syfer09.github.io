---
layout: default
title: Chapter 3 
date: 2025-07-23 16:00:00 +0000
categories: jekyll update
permalink: /learningc3
---

# Exercises

## E3.1

### Statement
What output do the following calls of `printf` produce? 
(a) `printf("%6d,%4d" , 86, 1040); `
(b) `printf ("%12.5e", 30.253); `
(c) `printf ("%. 4f" , 83.162); `
(d) `printf("%-6.2g", .0000009979); `

### Solution
<pre>
    86,1040
 3.02530e+01
83.1620
1e-06 
</pre>

## E3.2

### Statement
Write calls of `printf` that display a float variable x in the following formats. 
(a) Exponential notation; left-justified in a field of size 8; one digit after the decimal point. 
(b) Exponential notation; right-justified in a field of size 10; six digits after the decimal point. 
(c) Fixed decimal notation: left-justified in a field of size 8; three digits after the decimal point. 
(d) Fixed decimal notation; right-justified in a field of size 6: no digits after the decimal point. 

### Solution
(a) `printf("%-8.1e", x);`  
(b) `printf("%10.6e", x);`  
(c) `printf("%-8.3f", x);`  
(d) `printf("%6.0f", x);`  

## E3.3

### Statement
For each of the following pairs of `scanf` format strings, indicate whether or not the two strings are equivalent. If they're not, show how they can be distinguished. 
(a) `" %d"` versus `" %d"` 
(b) `"%d-%d-%d"` versus `"%d -%d -%d" `
(c) `"%f"` versus `"%f " `
(d) `"%f,%f"` versus `"%f, %f"` 

### Solution
(a)(b)(d) are all equivalent since white-spaces are skipped over, however in (c) the whitespace is at the end, meaning that `scanf` will hang until it receives a non whitespace character which it will then promptly discard. 

## E3.4* 

### Statement
Suppose that we call `scanf` as follows: 
```
scanf("%d%f%d", &i, &x, &j); 
```
If the user enters 10.3 5 6 what will be the values of `i`, `x`, and `j` after the call? (Assume that i and j are int variables and x is a float variable.) 

### Solution
`i=10`
`x=0.3`
`j=5`

This makes sense since `scanf` reads 10 for `i` then upon seeing the decimal point will stop reading an integer and start reading in a float. The whitespace will end the float and the last thing read will be 5 for `j`.

## E3.5*

### Statement
Suppose that we call `scanf` as follows:

`scanf("%f%d%f", &x, &i, &y);`

If the user enters
12.3 45.6 789
what will be the values of `x`, `i`, and `y` after the call? (Assume that `x` and `y` are float variables and `i` is an int variable.) 

### Solution
`x=12.3`
`i=45`
`y=0.6`

## E3.6

### Statement
Show how to modify the `addfrac.c` program of Section 3.2 so that the user is allowed to enter fractions that contain spaces before and after each / character. 

### Solution



# Projects

## P3.1

### Statement 
Write a program that accepts a date from the user in the form mm/dd/yyyy and then displays it in the form yyyymmdd: 

Enter a date (mm/dd/yyyy): 2/17/2011 
You entered the date 20110217 
### Code
```
//Filename: p1.c
//Purpose: Displays the date in a particular format
//Author: syfer
//Date: July 23rd, 2025

#include <stdio.h>

int main(){

    int day, month, year;
    
    printf("Enter a date (mm/dd/yyyy): ");
    scanf("%d/%d/%d",&month, &day, &year);
    
    printf("You entered the date %.4d%.2d%.2d\n", year, month, day);

    return 0;

}
```
### Thoughts
Took me a bit to realize that `%0.4d` and `.4d` are different things.
## P3.2

### Statement 
Write a program that formats product information entered by the user. A session with the program should look like this: 

Enter item number: 583 
Enter unit price: 13.5 

Enter purchase date (mm/dd/yyyy): 10/24/2010 
<pre>
Item    Unit       Purchase 
        Price      Date
583     $13.50     10/24/2010 
</pre>

The item number and date should be left justified; the unit price should be right justified. Allow dollar amounts up to $9999.99. Hint: Use tabs to line up the columns. 
### Code
```
//Filename: p2.c
//Purpose: Formats product information entered by user
//Author: syfer
//Date: July 23rd, 2025

#include <stdio.h>

int main(){

    int itemNum, day, month, year;
    float unitPrice;
    
    printf("Enter item number: ");
    scanf("%d",&itemNum);

    printf("Enter unit price: ");
    scanf("%f", &unitPrice);
    
    printf("Enter purchase date (mm/dd/yyyy): ");
    scanf("%d/%d/%d",&day,&month,&year);
        
    printf("Item \t Unit \t\t Purchase\n");
    printf(" \t Price \t\t Date\n");
    printf("%d \t $%.2f \t %.2d/%.2d/%.4d\n", itemNum, unitPrice, day, month, year);

    return 0;

}
```
### Thoughts
Also not bad, had some trouble with formatting. For some reason one tab between the unit price and purchase date wasn't enough and the date would be too far left. I assume that's due to the fact that the monetary value for unit price bleeds over into one tab, meaning we need 2 to ensure a sufficient buffer.

## P3.3

### Statement 
Books are identified by an International Standard Book Number (ISBN). ISBNs assigned after January 1, 2007 contain 13 digits, arranged in five groups, such as 978-0-393-97950-3. (Older ISBNs use 10 digits.) The first group (the GSI prefix) is currently either 978 or 979. The group identifier specifies the language or country of origin (for example, 0 and 1 are used in English-speaking countries). The publisher code identifies the publisher (393 is the code for W. W. Norton). The item number is assigned by the publisher to identify a specific book (97950 is the code for this book). An ISBN ends with a check digit thatâ€™s used to verify the accuracy of the preceding digits. Write a program that breaks down an ISBN entered by the user: 

Enter ISBN: 978-0-393-97950-3 
GSI prefix: 978 
Group identifier: 0 
Publisher code: 393 
Item number: 97950 
Check digit: 3 

Note: The number of digits in each group may vary: you can't assume that groups have the lengths shown in this example. Test your program with actual ISBN values (usually found on the back cover of a book and on the copyright page). 

### Code
```
//Filename: p3.c
//Purpose: Breaks down an IBSN entered by a user
//Author: syfer
//Date:

#include <stdio.h>

int main(){

    int gsi, groupIdentifier, pubCode, itemNumber, check;

    printf("Enter ISBN: ");
    scanf("%d-%d-%d-%d-%d", &gsi, &groupIdentifier, &pubCode, &itemNumber, &check);

    printf("GSI prefix: %d\n", gsi);
    printf("Group identifier: %d\n", groupIdentifier);
    printf("Publisher code: %d\n", pubCode);
    printf("Item number: %d\n", itemNumber);
    printf("Check digit: %d\n", check);

    
    return 0;

}
```
### Thoughts
Very straightforward.

## P3.4

### Statement 
Write a program that prompts the user to enter a telephone number in the form (xxx) xxx-xxxx and then displays the number in the form xxx.xxx.xxx: 

Enter phone number [(xxx) xxx-xxxx]: (404) 817-6900 
You entered 404.817.6900 

### Code
```
//Filename: p4.c
//Purpose: Displays a user given phone number in a different format 
//Author: syfer
//Date: July 24th, 2025

#include <stdio.h>

int main(){

    int region, first3, last4; // break number down into three parts region-first3-last3
    
    printf("Enter a phone number [(xxx) xxx-xxxx]: ");
    scanf("(%d) %d-%d", &region, &first3, &last4);

    printf("You entered: %d.%d.%d\n", region, first3, last4);

    return 0;

}
```
### Thoughts

Nothing here

## P3.5

### Statement 
Write a program that asks the user to enter the numbers from 1 to 16 (in any order) and then displays the numbers in a 4 by 4 arrangement, followed by the sums of the rows, columns, and diagonals: 

Enter the numbers from 1 to 16 in any order: 
16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 
<pre>
16 3 2 13 
5 10 11 8 
9 6 7 12 
4 15 14 1 
</pre>
Row sums: 34 34 34 34 
Column sums: 34 34 34 34 
Diagonal sums: 34 34 

If the row, column, and diagonal sums are all the same (as they are in this example), the numbers are said to form a magic square. The magic square shown here appears in a 1514 engraving by artist and mathematician Albrecht Durer. (Note that the middle numbers in the last row give the date of the engraving.) 

### Code
```
//Filename: p5.c
//Purpose: Displays the numbers 1-16 in a square based on the user supplied order. Also gives the row column and diagon sums.
//Author: syfer
//Date: July 24th, 2025

#include <stdio.h>

int main(){

    int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16; 

    printf("Enter the numbers from 1 to 16 in any order: ");
    scanf("%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d", &n1, &n2, &n3, &n4, &n5, &n6, &n7, &n8,
            &n9, &n10, &n11, &n12, &n13, &n14, &n15, &n16);

    printf("%d %d %d %d\n", n1, n2, n3, n4);
    printf("%d %d %d %d\n", n5, n6, n7, n8);
    printf("%d %d %d %d\n", n9, n10, n11, n12);
    printf("%d %d %d %d\n", n13, n14, n15, n16);

    printf("Row sums: %d %d %d %d\n", n1+n2+n3+n4, n5+n6+n7+n8, n9+n10+n11+n12, n13+n14+n15+n16);
    printf("Column sums: %d %d %d %d\n", n1+n5+n9+n13, n2+n6+n10+n14, n3+n7+n11+n15, n4+n8+n12+n16);
    printf("Diagonal sums: %d %d\n", n1+n6+n11+n16, n13+n10+n7+n4);
    
    return 0;

}
```
### Thoughts

I honestly looked up if people wrote out the variable before I started coding. Probably better to do stuff with arrays and `for` loops but that hasn't been introduced yet.

## P3.6

### Statement 
Modify the `addfrac.c` program of Section 3.2 so that the user enters both fractions at the same time, separated by a plus sign: 

Enter two fractions separated by a plus sign: 5/6+3/4 
The sum is 38/24 

### Code

`scanf("%d/%d+%d/%d", &numl, &denoml, &num2, &denom2);` 

Replaces the first `scanf` while the second `printf` and `scanf` are deleted. 
   
### Thoughts
Not much here again.

# Conclusion

Well another chapter of projects comes to a close. Learned some new stuff here especially with the formatting. I think the hardest part of the section was the left-justified right-justified stuff, since with `+-m.px` there are a lot of combinations for possible `m`, `p`, and `x`. Excited to move on to something more complex. 
