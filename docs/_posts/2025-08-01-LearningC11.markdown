---
layout: default
title: Chapter 11
date: 2025-08-01 16:00:00 +0000
categories: jekyll update
permalink: /learningc11
---
# Chapter 11
# Exercises
## E11.1
### Statement
If `i` is a variable and `p` points to `i`, which of the following expressions are aliases for `i`?

(a) `*p` (c) `*&p` (e) `*i` (g) `*&i`

(b) `&p` (d) `&*p` (f) `&i` (h) `&*i`

### Solution
(a) and (g) are aliases. It was tempting to call (h) one as well but, we do not really know the range of `i` and no way of knowing if the value of `i` could be used as a valid memory address to then negate through `&`. If `i` is negative for example then I doubt that would work.

## E11.2
### Statement
If `i` is an `int` variable and `p` and `q` are pointers to `int`, which of the following assignments are legal?

(a) `p = i;` (d) `p = &q;` (g) `p = *q;`

(b) `*p = &i;` (e) `p = *&q;` (h) `*p = q;`

(c) `&p = q;` (f) `p = q;` (i) `*p = *q;`

### Solution
(a) is illegal because we assign integer to integer pointer

(b) is illegal because we are assigning a reference to an integer

(c) is illegal because we are assigning a pointer to a pointer pointer... 

(d) is illegal because we are assigning a pointer pointer to a pointer 

(e) is legal because we are assigning a pointer to the object stored at the reference to a pointer, which is just a pointer

(f) is legal because  pointer to pointer is fine

(g) illegal because we are assigning a integer to a pointer

(h) is illegal because we are assigning a pointer to an `int`

(i) is legal because we assign integer to integer

## E11.3
### Statement
The following function supposedly computes the sum and average of the numbers in the array `a`, which has length `n`. `avg` and `sum` point to variables that the function should modify. Unfortunately, the function contains several errors; find and correct them.

```
void avg_sum(double a[], int n, double *avg, double *sum) {
    int i;

    sum = 0.0;
    for (i = 0 ; i < n; i++)
        sum += a[i];
    avg = sum / n;
}
```

### Solution
To start, assigning the value `0.0` to just `sum` is an error since we are assigning an integer to a pointer. We should modify `sum*`. Reading through the code further, this applies to every mention of `sum`. Same goes for `avg`.

## E11.4
### Statement
Write the following function:

`void swap(int *p, int *q);`

When passed the addresses of two variables, swap should exchange the values of the variables:

`swap(&i, &j); /* exchanges values of i and j */`

### Solution

```
void swap (int *p, int *q){
    int temp = q*;
    q* = p*;
    p* = temp;
}
```

## E11.5
### Statement
Write the following function:

`void split_time(long total_sec, int *hr, int *min, int *sec);`

`total_sec` is a time represented as the number of seconds since midnight, `hr`, `min`, and `sec` are pointers to variables in which the function will store the equivalent time in hours (0-23), minutes (0-59)m and seconds (0-59), respectively.

### Solution
```
void split_time(long total_sec, int *hr, int *min, int *sec){
    *hr = total_sec / (60 * 60);
    total_sec -= total_sec / (60 * 60);
    *min = total_sec / 60;
    total_sec -= total_sec / 60;
    *sec = total_sec;
}
```

## E11.6
### Statement
Write the following function:

`void find_two_largest(int a[], int n, int ‘largest, int *second_largest);`

When passed an array `a` of length `n`, the function will search `a` for its largest and second-largest elements, storing them in the variables pointed to by `largest` and `second_largest`, respectively.

### Solution
```
void find_two_largest(int a[], int n, int *largest, int *second_largest){
     *largest = *second_largest = a[0];
     for(int i = 0; i < n; i++){
         if (a[i] > largest){
             second_largest = largest;
             largest = a[i];
         } else if (a[i] > second_largest){
             second_largest = a[i];
         }
     }
}
```

## E11.7
### Statement
Write the following function:

`void split_date(int day_of_year, int year, int *month, int *day);`

`day_of_year` is an integer between 1 and 366, specifying a particular day within the year designated by `year`. `month` and `day` point to variables in which the function will store the equivalent month (1-12) and day within that month (1-31).

### Solution
```
void split_date(int day_of_year, int year, int *month, int *day){
    int months[12] = {31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};
    for(int i = 0; i < 12; i++){
        if(day_of_year <= months[i]){
            month* = i;
            if(i == 0) *day = day_of_year;
            else *day = day_of_year - months[i-1];
        }
    }
}
```

I actually think that's pretty clever, considering I was originally going to just do 12 `if` statements to check.

## E11.8
### Statement
Write the following function:

`int *find_largest(int a[], int n);`

When passed an array `a` of length `n`, the function will return a pointer to the array’s largest
element.

### Solution
```
int *find_largest(int a[], int n){
    int *p = &a[0];
    for(int i = 0; i < n; i++){
        if(*p < a[i]) p = &a[i];
    }
}
```

# Projects
## P11.1
### Statement
Modify Programming Project 7 from Chapter 2 so that it includes the following function:

`void pay_amount(int dollars, int *twenties, int *tens, int *fives, int *ones);`

The function determines the smallest number of $20, $10, $5, and $1 bills necessary to pay the amount represented by the `dollars` parameter. The `twenties` parameter points to a variable in which the function will store the number of $20 bills required. The `tens`, `fives`, and `ones` parameters are similar.

### Code
```
// Filename: p1.c
// Purpose: Asks the user to enter a U.S. dollar amount and then shows how to pay that amount using the smallest number of $20, $10, $5, and $1 bills
// Author: syfer
// Date: August 1st, 2025

#include <stdio.h>

void pay_amount(int dollars, int *twenties, int *tens, int *fives, int *ones);

int main(){

    int amount, one, five, ten, twenty;

    printf("Enter a dollar amount: ");
    scanf("%d",&amount);
    pay_amount(amount, &twenty, &ten, &five, &one);

    printf("$20 bills: %d\n", twenty);
    printf("$10 bills: %d\n", ten);
    printf("$5 bills: %d\n", five);
    printf("$1 bills: %d\n", one);
    
    return 0;

}

void pay_amount(int dollars, int *twenties, int *tens, int *fives, int *ones){
    *twenties = dollars / 20;
    dollars -= *twenties * 20;
    *tens = dollars / 10;
    dollars -= *tens * 10;
    *fives = dollars / 5;
    dollars -= *fives * 5;
    *ones = dollars;
}
```

## P11.2
### Statement
Modify Programming Project 8 from Chapter 5 so that it includes the following function:

`void find_closest_flight(int desiredtime, int *departure_time, int *arrival_time);`

This function will find the flight whose departure time is closest to `desired_time` (expressed in minutes since midnight). It will store the departure and arrival times of this flight (also expressed in minutes since midnight) in the variables pointed to by `departure_time` and `arrival_time`, respectively.
### Code
```
// Filename: p2.c
// Purpose: Displays departure and arrival time that are closest to a user entered time
// Author: syfer
// Date: August 2nd, 2025

#include <stdio.h>

#define SIZE 8 

/*
|Departure time|Arrival time|Min since midnight
|-|-|
|8:00 a.m.|10:16 a.m.|480|
|9:43 a.m.|11:52 a.m.|583|
|11:19 a.m.|1:31 p.m.|679|
|12:47 p.m.|3:00 p.m.|767|
|2:00 p.m.|4:08 p.m.|840|
|3:45 p.m.|5:55 p.m.|945|
|7:00 p.m.|9:20 p.m.|1140| 
|9:45 p.m.|11:58 p.m.|1305|
*/

void find_closest_flight(int desiredtime, int *departure_time, int *arrival_time);

int main(){
    int hour, time, min, dep, arr;

    printf("Enter a 24-hour time: ");
    scanf("%d:%d", &hour, &min);
    
    time = hour * 60 + min;
    find_closest_flight(time, &dep, &arr);

    printf("Closest flight departing on %.2d:%.2d and arriving %.2d:%.2d\n", dep / 60, dep % 60,
            arr/60, arr % 60);
    return 0;
}

void find_closest_flight(int desiredtime, int *departure_time, int *arrival_time){
    
    int d[SIZE] = {480, 583, 679, 767, 840, 945, 1140, 1305}, 
        a[SIZE] = {616, 712, 811, 900, 968, 1075, 1280, 1438};

    if (desiredtime <= d[0] + (d[1] - d[0]) / 2){
        if (desiredtime < d[0] && d[1] - desiredtime > desiredtime){
            *departure_time = d[7];
            *arrival_time = a[7];
        } else {
            *departure_time = d[0];
            *arrival_time = a[0];
        }
    } else if (desiredtime <= d[1] + (d[2] - d[1]) / 2){
            *departure_time = d[1];
            *arrival_time = a[1];
    } else if (desiredtime <= d[2] + (d[3] - d[2]) / 2){
            *departure_time = d[2];
            *arrival_time = a[2];
    } else if (desiredtime <= d[3] + (d[4] - d[3]) / 2){
            *departure_time = d[3];
            *arrival_time = a[3];
    } else if (desiredtime <= d[4] + (d[5] - d[4]) / 2){
            *departure_time = d[4];
            *arrival_time = a[4];
    } else if (desiredtime <= d[5] + (d[6] - d[5]) / 2){
            *departure_time = d[5];
            *arrival_time = a[5];
    } else if (desiredtime <= d[6] + (d[7] - d[6]) / 2){
            *departure_time = d[6];
            *arrival_time = a[6];
    } else {
            *departure_time = d[7];
            *arrival_time = a[7];
    }
}
```

### Thoughts
Really getting sick of this project, since every time it deals with hard-coded data about the flights which means barely anything can be automated.

## P11.3
### Statement
Modify Programming Project 3 from Chapter 6 so that it includes the following function:

`void reduce(int numerator, int denominator, int *reduced_numerator, int *reduced_denominator);`

`numerator` and `denominator` are the numerator and denominator of a fraction, `reduced_numerator` and `reduced_denominator` are pointers to variables in which the function will store the numerator and denominator of the fraction once it has been reduced to lowest terms.

### Code
```
// Filename: p3.c
// Purpose: Reduces a user given fraction to lowest terms
// Author: syfer
// Date: August 2nd, 2025

#include <stdio.h>

void reduce(int numerator, int denominator, int *reduced_numerator, int *reduced_denominator);

int main(){

    int num, denom, numR, denomR;

    printf("Enter a fraction: ");
    scanf("%d/%d", &num, &denom);

    reduce(num, denom, &numR, &denomR);
    printf("In lowest terms: %d/%d\n",numR , denomR);

    return 0;
}

void reduce(int numerator, int denominator, int *reduced_numerator, int *reduced_denominator){

    int remainder;
    *reduced_numerator = numerator;
    *reduced_denominator = denominator;

    while (denominator > 0){
        remainder = numerator % denominator;
        numerator = denominator;
        denominator = remainder;
    }
    *reduced_numerator /= numerator;
    *reduced_denominator /= numerator;
}
```

## P11.4
### Statement
Modify the `poker.c` program of Section 10.5 by moving all external variables into `main` and modifying functions so that they communicate by passing arguments. The `analyze_hand` function needs to change the `straight`, `flush`, `four`, `three`, and `pairs` variables, so it will have to be passed pointers to those variables.

### Code
```
// Filename: p4.c
// Purpose: Analyzes a hand of poker
// Author: syfer
// Date: August 2nd, 2025

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define NUM_RANKS 13 
#define NUM_SUITS 4 
#define NUM_CARDS 5 

// external variables 

// prototypes  
void read_cards(int num_in_rank[], int num_in_suit[]); 
void analyze_hand(int num_in_rank[], int num_in_suit[], bool *straight, bool *flush, bool *four,
        bool *three, int *pairs); 
void print_result(bool *straight, bool *flush, bool *four, bool *three, int *pairs);

// main: Calls read_cards, analyze_hand, and print_result repeatedly.  

int main(void) { 
    
    int num_in_rank[NUM_RANKS]; 
    int num_in_suit[NUM_SUITS]; 
    bool straight, flush, four, three; 
    int pairs; /* can be 0, 1, or 2 */ 
    for (;;) { 
        read_cards(num_in_rank, num_in_suit); 
        analyze_hand(num_in_rank, num_in_suit, &straight, &flush, &four, &three, &pairs); 
        print_result(&straight, &flush, &four, &three, &pairs); 
    } 
} 

// read_cards: Reads the cards into the external variables num_in_rank and num_in_suit; * 
// checks for bad cards and duplicate cards. 

void read_cards(int num_in_rank[], int num_in_suit[]) { 
    bool card_exists[NUM_RANKS][NUM_SUITS]; 
    char ch, rank_ch, suit_ch; 
    int rank, suit; 
    bool bad_card; 
    int cards_read = 0; 

    for (rank = 0; rank < NUM_RANKS; rank++) { 
        num_in_rank[rank] = 0; 
        for (suit = 0; suit < NUM_SUITS; suit++) 
            card_exists[rank][suit] = false; 
    } 

    for (suit = 0; suit < NUM_SUITS; suit++) 
        num_in_suit[suit] = 0; 

    while (cards_read < NUM_CARDS) { 
        bad_card = false; 

        printf("Enter a card: "); 

        rank_ch = getchar(); 
        switch (rank_ch) { 
            case '0': exit(EXIT_SUCCESS);
            case '2' : rank = 0; break; 
            case '3' : rank = 1; break; 
            case '4' : rank = 2; break; 
            case '5' : rank = 3; break; 
            case '6' : rank = 4; break; 
            case '7' : rank = 5; break; 
            case '8' : rank = 6; break; 
            case '9' : rank = 7; break; 
            case 't': case 'T' : rank = 8; break; 
            case 'j': case 'J' : rank = 9; break; 
            case 'q': case 'Q' : rank = 10 ; break; 
            case 'k': case 'K' : rank = 11 ; break; 
            case 'a': case 'A' : rank = 12 ; break; 
            default: bad_card = true; 
        } 

        suit_ch = getchar();
        switch (suit_ch) { 
            case 'c': case 'C': suit = 0; break; 
            case 'd': case 'D' : suit = 1; break; 
            case 'h': case 'H' : suit = 2; break; 
            case 's': case 'S' : suit = 3; break; 
            default: bad_card = true; 
        } 

        while ((ch = getchar()) != '\n') 
            if (ch != ' ') bad_card = true; 

        if (bad_card) 
            printf("Bad card; ignored. \n"); 
        else if (card_exists[rank][suit]) 
            printf("Duplicate card; ignored.\n"); 
        else { 
            num_in_rank[rank]++; 
            num_in_suit[suit]++; 
            card_exists[rank][suit] = true; 
            cards_read++; 
        } 
    } 
} 
// analyze hand: Determines whether the hand contains a
// straight, a flush, four-of-a-kind, 
// and/or three-of-a-kind; determines the  
// number of pairs; stores the results into  
// the external variables straight, flush,  
// four, three, and pairs. 

void analyze_hand(int num_in_rank[], int num_in_suit[], bool *straight, bool *flush, bool *four,
        bool *three, int *pairs) { 
    int num_consec = 0;
    int rank, suit; 

    *straight = false; 
    *flush = false; 
    *four = false; 
    *three = false; 
    *pairs = 0; 

    /* check for flush */ 

    for (suit = 0; suit < NUM_SUITS; suit++) 
        if (num_in_suit[suit] == NUM_CARDS) 
            *flush = true; 

    /* check for straight */ 
    rank = 0; 
    while (num_in_rank[rank] == 0) rank++; 
    for (; rank < NUM_RANKS && num_in_rank[rank] > 0; rank++) 
        num_consec++; 
    if (num_consec == NUM_CARDS) { 
        *straight = true; 
        return; 
    } 

    /* check for 4-of-a-kind, 3-of-a-kind, and pairs */ 
    for (rank = 0; rank < NUM_RANKS; rank++) { 
        if (num_in_rank[rank] == 4) *four = true; 
        if (num_in_rank[rank] == 3) *three = true; 
        if (num_in_rank[rank] == 2) *pairs++; 
    } 
} 

// print_result: Prints the classification of the hand,  
// based on the values of the external  
// variables straight, flush, four, three,  
// and pairs.  

void print_result(bool *straight, bool *flush, bool *four, bool *three, int *pairs) { 
    if (*straight && *flush) 
        printf("Straight flush"); 
    else if (*four)                 
        printf("Four of a kind"); 
    else if (*three && *pairs == 1) 
        printf("Full house"); 
    else if (*flush) 
        printf("Flush"); 
    else if (*straight) 
        printf("Straight"); 
    else if (*three) 
        printf("Three of a kind"); 
    else if (*pairs == 2) 
        printf("Two pairs"); 
    else if (*pairs == 1) 
        printf("Pair"); 
    else
        printf("High card"); 

    printf("\n\n"); 
} 
```

# Conclusion

Pointers were and are the big concept for me from this book that I hope to take away. In particular, better memory management, but we really have not gotten there yet. This chapter was a good intro, and I appreciate the fact that there are a full three chapters dedicated to this. I definitely learned some things, even though I had seen pretty much everything before. It always helps to learn these more confusing concepts over and over again.

That being said, while the exercises were interesting and informative, the projects were not. They just took one idea about modifying variables through passing a pointer as a function argument, and ran with it. All four projects were copy and paste solutions with occasionally adding an `*` here and there. I do at the same time realize that we really have not covered much more with pointers, and the ever looming array index chapter (12) will probably have more complex project.
